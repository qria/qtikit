{"version":3,"file":"main.5c7104051d92f8a23eef.hot-update.js","sources":["webpack:///./src/qti.tsx"],"sourcesContent":["import React from \"react\";\nimport { DOMParser } from \"@xmldom/xmldom\";\n\nimport { createInteractionComponent } from \"./interactions\";\nimport { createHTMLComponent } from \"./html\";\n\nnamespace QTI {\n  const NodeType = {\n    ELEMENT_NODE: 1,\n    TEXT_NODE: 3,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n  };\n\n  type NodeType = typeof NodeType[keyof typeof NodeType];\n\n  const InteractionElementTypes = [\n    \"customInteraction\",\n    \"drawingInteraction\",\n    \"gapMatchInteraction\",\n    \"matchInteraction\",\n    \"graphicGapMatchInteraction\",\n    \"hotspotInteraction\",\n    \"graphicOrderInteraction\",\n    \"selectPointInteraction\",\n    \"graphicAssociateInteraction\",\n    \"sliderInteraction\",\n    \"choiceInteraction\",\n    \"mediaInteraction\",\n    \"hottextInteraction\",\n    \"orderInteraction\",\n    \"extendedTextInteraction\",\n    \"uploadInteraction\",\n    \"associateInteraction\",\n    \"feedbackBlock\",\n    \"templateBlock\",\n    \"infoControl\",\n    \"math\",\n  ];\n\n  const HTMLElementTypes = [\n    \"pre\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"p\",\n    \"address\",\n    \"dl\",\n    \"ol\",\n    \"ul\",\n    \"hr\",\n    \"blockquote\",\n    \"table\",\n    \"div\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"figure\",\n    \"header\",\n    \"nav\",\n    \"section\",\n    \"video\",\n    \"img\",\n    \"rb\",\n    \"rp\",\n    \"rt\",\n    \"rtc\",\n    \"ruby\",\n    \"em\",\n    \"a\",\n    \"code\",\n    \"span\",\n    \"acronym\",\n    \"big\",\n    \"tt\",\n    \"kbd\",\n    \"q\",\n    \"i\",\n    \"sup\",\n  ];\n\n  function isElementNode(nodeType: number): boolean {\n    return nodeType === NodeType.ELEMENT_NODE;\n  }\n\n  function isHTMLElementType(nodeName: string): boolean {\n    return HTMLElementTypes.includes(nodeName);\n  }\n\n  function isInteractionElement(nodeName: string): boolean {\n    return InteractionElementTypes.includes(nodeName);\n  }\n\n  function parseItemBody(node: Node | Element): React.ReactElement[] {\n    const component: React.ReactElement[] = [];\n\n    for (let i = 0; i < node.childNodes.length; i++) {\n      const childNode = node.childNodes[i];\n\n      if (childNode.nodeName === \"#text\") {\n        component.push(React.createElement(\"span\", null, childNode.nodeValue));\n      } else if (isHTMLElementType(childNode.nodeName)) {\n        const children = parseItemBody(childNode);\n        component.push(createHTMLComponent(childNode, children));\n      } else if (isInteractionElement(childNode.nodeName)) {\n        const interactionComponent = createInteractionComponent(childNode);\n        if (interactionComponent) {\n          component.push(interactionComponent);\n        }\n      } else {\n        // MAYBE createCustomComponent\n        throw new Error(`Unsupported node type: ${childNode.nodeName}`);\n      }\n    }\n\n    return component;\n  }\n\n  export function createComponent(itemBodyXML: string): React.ReactElement[] {\n    const root = new DOMParser().parseFromString(itemBodyXML, \"text/xml\");\n    const itemBody = root.childNodes[0];\n\n    if (!itemBody) {\n      throw new Error(\"QTI itemBody is not found\");\n    }\n\n    return parseItemBody(itemBody);\n  }\n}\n\nexport default QTI;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAwBA;AACA;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA/HA;AACA;AAgIA;;;;A","sourceRoot":""}